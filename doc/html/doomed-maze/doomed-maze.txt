-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/doomed-maze#readme</a>
@package doomed-maze
@version 0.1.0.0

module Consts

-- | Screen dimensions in pixelx
screenWidth :: Int

-- | Screen dimensions in pixelx
screenHeight :: Int

-- | Field of view
fov :: Double

-- | Screen dimensions halved. (Used due to other coordinate system in
--   CodeWorld)
halfScreenWidth :: Int

-- | Screen dimensions halved. (Used due to other coordinate system in
--   CodeWorld)
halfScreenHeight :: Int

-- | Battery
batteryMax :: Double

-- | Battery
batteryMin :: Double

-- | How fast the battery loses energy
dischargingRate :: Double

-- | constants for minimap
cellRad :: Double

-- | constants for minimap
cellSize :: Double

-- | constants for minimap
stripeWidth :: Double

-- | Screen dimensions in CodeWorld values
width :: Double

-- | Screen dimensions in CodeWorld values
height :: Double

module Space

-- | Data type to represent coordinates
type Coords = (Int, Int)

-- | Rectangle area in discrete space, defined by border coordinates.
data Area
Area :: Coords -> Coords -> Area

-- | Build smallest rectangle area, uniting 2 given areas.
maxArea :: Area -> Area -> Area

-- | Check if coords is inside Area
inArea :: Area -> Coords -> Bool

-- | Space with objects
data Space a
Space :: [(Coords, a)] -> Maybe Area -> Space a
[spaceObjects] :: Space a -> [(Coords, a)]
[spaceArea] :: Space a -> Maybe Area

-- | Empty space
empty :: Space a

-- | Space with single object
singleton :: Coords -> a -> Space a

-- | Union of 2 spaces
union :: Space a -> Space a -> Space a

-- | Build space from list of objects
fromList :: [(Coords, a)] -> Space a

-- | Function to swap elements of tuple.
swap :: (a, b) -> (b, a)

-- | wrapper for basic object
delta :: a -> (a, String)

-- | Transpose Area
transposeArea :: Area -> Area

-- | Transpose space
transposeSpace :: Space a -> Space a

-- | Splitting area horizontally
splitH :: Int -> Area -> (Area, Area)

-- | Check if area is thin.
thinArea :: Area -> Bool

-- | Generation of all possible coords for area
generateIndexRange :: Area -> [Coords]

-- | Function for splitting area for rendering
getSplitNum :: Area -> Int
instance Data.Foldable.Foldable Space.Space
instance GHC.Base.Functor Space.Space
instance GHC.Show.Show a => GHC.Show.Show (Space.Space a)
instance GHC.Show.Show Space.Area
instance GHC.Base.Semigroup (Space.Space a)
instance GHC.Base.Monoid (Space.Space a)

module MazeGenerator
type Maze = Space String

-- | Utility function for debugging
prnt :: Show a => a -> a

-- | Transpose maze
transposeMaze :: Maze -> Maze

-- | Generating random coords for vertical wall. X coordinate shows the
--   position of wall, coordinate y - the position of hole in the wall In
--   order to prevent changes gluing and keep maze connected, walls are
--   created on odd positions, ways on even.
randomWallCoords :: RandomGen g => Area -> g -> (Coords, g)

-- | Create a Maze object for the wall, given coords, Area and object on
--   the pass
createVerticalWall :: Coords -> Area -> String -> Maze
allDoors :: [String]
head' :: [a] -> Maybe a

-- | Function to generate button in random position.
generateButtonRandomly :: RandomGen g => g -> Area -> String -> (Maze, g)
deleteObjFromList :: [String] -> String -> [String]

-- | Function that guarantees that exit is available.
clearExit :: Maze -> Maze

-- | Function to delete unneeded objects from Maze
filterEmpty :: Maze -> Maze

-- | Function to recursively generate maze. Every time maze is divided into
--   2 and each part is generated recursively
genMaze :: RandomGen g => Area -> g -> [String] -> [String] -> Maze

-- | Custom function to prevent <a>Space</a> naming conflicts
toUpper :: String -> String

-- | Generation of exit coords.
exit :: Coords -> Maze

-- | Function to generate random coords in range
generateRandomCoords :: RandomGen g => g -> Area -> (Coords, g)

-- | Function for recursive generation of batteries.
generateBatteriesList :: RandomGen g => g -> Maze -> [(Coords, String)] -> Int -> [(Coords, String)]

-- | Function to generate batteries for appending
addBatteries :: RandomGen g => g -> Maze -> Int -> Maze

-- | Generate level with given difficulty
generateDifficultLevel :: RandomGen g => g -> Int -> Maze

-- | Function to convert maze to array
mazeToGrid :: [(Int, Int)] -> Maze -> [[String]] -> [[String]]

-- | Getter of object given coords.
getObjectFromCoords :: (Int, Int) -> [(Coords, String)] -> String

-- | Getter of area given maze.
getAreaFromMaze :: Maze -> Area

-- | Get maze size
getMazeSize :: Maze -> Coords

-- | Getter of objects from maze.
getObjsFromMaze :: Maze -> [(Coords, String)]

-- | Check if there is an object on the coords.
isObject :: Coords -> Maze -> Bool

-- | Function to split array into subarrays every n els.
splitEvery :: Int -> [a] -> [[a]]

-- | Function for transforming Array of Strings to a single string
joinString :: [[String]] -> String

-- | Funtion to add borders to string representation of Maze
addBorders :: [String] -> [String]

module Vectors
i2d :: Int -> Double

-- | Vector normalization function
normalized :: Vector -> Vector

-- | Function to get angle between 2 vectors
angleBetween :: Vector -> Vector -> Double

module Maps

-- | Data type describing all possible objects in the game
data GameObject
Wall :: GameObject
Door :: Color -> GameObject
Button :: Color -> GameObject
Floor :: GameObject
Entrance :: GameObject
Exit :: GameObject
Battery :: GameObject
Border :: GameObject
type Map = Array (Int, Int) GameObject

-- | Level data type
data Level
Level :: [String] -> [Color] -> Vector -> Vector -> Level
[levelMap] :: Level -> [String]
[openColors] :: Level -> [Color]
[initialPos] :: Level -> Vector
[initialDir] :: Level -> Vector

-- | Function to convert string representation of map into an array
parseMap :: [String] -> Map
symbolToObject :: Char -> GameObject
colorObject :: Char -> GameObject
instance GHC.Show.Show Maps.Level
instance GHC.Classes.Eq Maps.GameObject
instance GHC.Show.Show Maps.GameObject

module InteractiveObjects

-- | Function to get updated list of opened doors
getNewDoorsColors :: (Int, Int) -> Map -> [Color] -> [Color]

-- | Function to check if current player position is inside button
isInsideButton :: Vector -> Map -> (Bool, Maybe (Int, Int))

-- | Function to check if current player position is inside button
isInsideBattery :: Vector -> Map -> (Bool, Maybe (Int, Int))

-- | Function to check if current player position is inside exit
isInsideExit :: Vector -> Map -> (Bool, Maybe (Int, Int))
isInside :: Vector -> Map -> (GameObject -> Bool) -> (Bool, Maybe (Int, Int))

module DoomedMaze
game :: IO ()
instance GHC.Show.Show DoomedMaze.HitSide
instance GHC.Show.Show DoomedMaze.State
